import { sql } from '../config/connect.js';

let createFoolballFieldService = async (fieldData) => {
   // console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c trong service:", fieldData);

   try {
      const { name, size, price, status, idProvince, idDistrict, idWard, address, idBusiness, images } = fieldData;

      // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!name || !size || !price || status == null || !address || !idBusiness || !images || images.length === 0) {
         return { success: false, error: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!" };
      }

      // Ki·ªÉm tra n·∫øu c√≥ tr∆∞·ªùng b√≥ng ƒë√° v·ªõi c√πng ƒë·ªãa ch·ªâ ho·∫∑c t√™n ƒë√£ t·ªìn t·∫°i
      const { data: existingFields, error: existingFieldsError } = await sql
         .from('FoolbalField')
         .select('id')
         .eq("name", name);

      if (existingFieldsError) {
         console.error("‚ùå L·ªói khi ki·ªÉm tra tr∆∞·ªùng b√≥ng ƒë√°:", existingFieldsError);
         return { success: false, error: existingFieldsError.message };
      }

      // N·∫øu tr∆∞·ªùng b√≥ng ƒë√° ƒë√£ t·ªìn t·∫°i v·ªõi t√™n ho·∫∑c ƒë·ªãa ch·ªâ t∆∞∆°ng t·ª±
      if (existingFields.length > 0) {
         return { success: false, error: "Tr∆∞·ªùng b√≥ng ƒë√° ƒë√£ t·ªìn t·∫°i!" };
      }

      // T·∫°o tr∆∞·ªùng b√≥ng ƒë√° m·ªõi
      const { data, error } = await sql
         .from('FoolbalField')
         .insert([
            {
               name,
               size,
               price,
               status,
               idProvince,
               idDistrict,
               idWard,
               address,
               idBusiness,
               image: images,  // Chuy·ªÉn ƒë·ªïi m·∫£ng th√†nh chu·ªói JSON n·∫øu c·ªôt l√† text
            }
         ])
         .select('*')
         .single()

      if (error) {
         console.error("‚ùå L·ªói insert v√†o Supabase:", error);
         return { success: false, error: error.message };
      }

      return { success: true, data };
   } catch (e) {
      console.error("‚ùå L·ªói h·ªá th·ªëng:", e);
      return { success: false, error: "L·ªói h·ªá th·ªëng!" };
   }
};
let displayFoolbalField = async (idBusiness) => {
   try {
      if (!idBusiness) {
         return { success: false, error: "Thi·∫øu idBusiness!" };
      }
      const { data, error } = await sql
         .from('FoolbalField')
         .select("*")
         .eq("idBusiness", idBusiness)

      if (error) {
         return { success: false, message: error.message }
      }
      return {
         success: true,
         data: data
      }
   } catch (e) {
      console.log(e)
   }
}

let updateFootballFieldService = async (id, updateData) => {
   try {
      // console.log("üîπ D·ªØ li·ªáu nh·∫≠n ƒë·ªÉ c·∫≠p nh·∫≠t:", updateData);

      // L·∫•y d·ªØ li·ªáu c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
      const { data: currentData, error: fetchError } = await sql
         .from("FoolbalField")
         .select("*")
         .eq("id", id)
         .single();

      if (fetchError) return { success: false, error: "Kh√¥ng t√¨m th·∫•y s√¢n b√≥ng!" };

      // X√≥a c√°c tr∆∞·ªùng kh√¥ng c√≥ trong DB
      delete updateData.created_at;  // Gi·ªØ nguy√™n ng√†y t·∫°o
      delete updateData.key;         // X√≥a 'key' v√¨ kh√¥ng c√≥ trong b·∫£ng

      const updatedData = { ...currentData, ...updateData };

      // C·∫≠p nh·∫≠t d·ªØ li·ªáu
      const { data: updatedField, error: updateError } = await sql
         .from("FoolbalField")
         .update(updatedData)
         .eq("id", id)
         .select("*")
         .single();

      if (updateError) return { success: false, error: updateError.message };

      return { success: true, data: updatedField };
   } catch (e) {
      console.error("‚ùå L·ªói h·ªá th·ªëng:", e);
      return { success: false, error: "L·ªói h·ªá th·ªëng!" };
   }
};

const deleteFootballFieldService = async (idFF) => {
   try {
      const { error, count } = await sql
         .from("FoolbalField")
         .delete()
         .eq("id", idFF);

      if (error) {
         return {
            success: false,
            message: "L·ªói khi x√≥a s√¢n b√≥ng: " + error.message,
         };
      }

      if (count === 0) {
         return {
            success: false,
            message: "Kh√¥ng t√¨m th·∫•y s√¢n b√≥ng ƒë·ªÉ x√≥a",
         };
      }

      return {
         success: true,
         message: "X√≥a s√¢n b√≥ng th√†nh c√¥ng",
      };
   } catch (e) {
      return {
         success: false,
         message: "L·ªói h·ªá th·ªëng: " + e.message,
      };
   }
};



export { createFoolballFieldService, displayFoolbalField, updateFootballFieldService, deleteFootballFieldService }