import { sql } from '../config/connect.js';


let createFoolballFieldService = async (fieldData) => {
   try {
      const { name, size, price, status, idProvince, idDistrict, idWard, address, idBusiness, images } = fieldData;

      // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!name || !size || !price || status == null || !address || !idBusiness) {
         return { success: false, error: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!" };
      }

      // Ki·ªÉm tra s√¢n b√≥ng ƒë√£ t·ªìn t·∫°i ch∆∞a
      const { data: existingFields, error: existingFieldsError } = await sql
         .from('FoolbalField')
         .select('id')
         .eq("name", name);

      if (existingFieldsError) {
         console.error("‚ùå L·ªói khi ki·ªÉm tra tr∆∞·ªùng b√≥ng ƒë√°:", existingFieldsError);
         return { success: false, error: existingFieldsError.message };
      }

      if (existingFields.length > 0) {
         return { success: false, error: "Tr∆∞·ªùng b√≥ng ƒë√° ƒë√£ t·ªìn t·∫°i!" };
      }

      // T·∫°o s√¢n b√≥ng m·ªõi
      const { data, error } = await sql
         .from('FoolbalField')
         .insert([
            {
               name,
               size,
               price,
               status,
               idProvince,
               idDistrict,
               idWard,
               address,
               idBusiness,
            }
         ])
         .select('*')
         .single();

      if (error) {
         console.error("‚ùå L·ªói insert v√†o Supabase:", error);
         return { success: false, error: error.message };
      }

      const fieldId = data.id;  // L·∫•y ID c·ªßa s√¢n b√≥ng v·ª´a t·∫°o

      // N·∫øu c√≥ ·∫£nh, l∆∞u v√†o b·∫£ng FootballFieldImages
      if (images.length > 0) {
         const imageData = images.map(url => ({ id_FField: fieldId, image_url: url }));

         const { error: imageError } = await sql
            .from("FootballFieldImages")
            .insert(imageData);

         if (imageError) {
            console.error("‚ùå L·ªói khi l∆∞u ·∫£nh:", imageError);
            return { success: false, error: "L·ªói khi l∆∞u ·∫£nh!" };
         }
      }

      return { success: true, data };

   } catch (e) {
      console.error("‚ùå L·ªói h·ªá th·ªëng:", e);
      return { success: false, error: "L·ªói h·ªá th·ªëng!" };
   }
};

let displayFoolbalFieldIdService = async (idBusiness) => {
   try {
      if (!idBusiness) {
         return { success: false, error: "Thi·∫øu idBusiness!" };
      }
      const { data, error } = await sql
         .from('FoolbalField')
         .select("*")
         .eq("idBusiness", idBusiness)

      if (error) {
         return { success: false, message: error.message }
      }
      return {
         success: true,
         data: data
      }
   } catch (e) {
      console.log(e)
   }
}

let updateFootballFieldService = async (id, updateData) => {
   try {
      // console.log("üîπ D·ªØ li·ªáu nh·∫≠n ƒë·ªÉ c·∫≠p nh·∫≠t:", updateData);

      // L·∫•y d·ªØ li·ªáu c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
      const { data: currentData, error: fetchError } = await sql
         .from("FoolbalField")
         .select("*")
         .eq("id", id)
         .single();

      if (fetchError) return { success: false, error: "Kh√¥ng t√¨m th·∫•y s√¢n b√≥ng!" };

      // X√≥a c√°c tr∆∞·ªùng kh√¥ng c√≥ trong DB
      delete updateData.created_at;  // Gi·ªØ nguy√™n ng√†y t·∫°o
      delete updateData.key;         // X√≥a 'key' v√¨ kh√¥ng c√≥ trong b·∫£ng

      const updatedData = { ...currentData, ...updateData };

      // C·∫≠p nh·∫≠t d·ªØ li·ªáu
      const { data: updatedField, error: updateError } = await sql
         .from("FoolbalField")
         .update(updatedData)
         .eq("id", id)
         .select("*")
         .single();

      if (updateError) return { success: false, error: updateError.message };

      return { success: true, data: updatedField };
   } catch (e) {
      console.error("‚ùå L·ªói h·ªá th·ªëng:", e);
      return { success: false, error: "L·ªói h·ªá th·ªëng!" };
   }
};

const deleteFootballFieldService = async (idFF) => {
   try {
      // X√≥a t·∫•t c·∫£ ·∫£nh li√™n quan tr∆∞·ªõc
      const { error: imageError } = await sql
         .from("FootballFieldImages")
         .delete()
         .eq("id_FField", idFF);

      if (imageError) {
         return {
            success: false,
            message: "L·ªói khi x√≥a ·∫£nh s√¢n b√≥ng: " + imageError.message,
         };
      }

      // X√≥a s√¢n b√≥ng sau khi ƒë√£ x√≥a ·∫£nh
      const { error, count } = await sql
         .from("FoolbalField")
         .delete()
         .eq("id", idFF);

      if (error) {
         return {
            success: false,
            message: "L·ªói khi x√≥a s√¢n b√≥ng: " + error.message,
         };
      }

      if (count === 0) {
         return {
            success: false,
            message: "Kh√¥ng t√¨m th·∫•y s√¢n b√≥ng ƒë·ªÉ x√≥a",
         };
      }

      return {
         success: true,
         message: "X√≥a s√¢n b√≥ng th√†nh c√¥ng",
      };
   } catch (e) {
      return {
         success: false,
         message: "L·ªói h·ªá th·ªëng: " + e.message,
      };
   }
};

const getAllFoolbalFieldService = async () => {
   try {
      const { data, error } = await sql
         .from("FoolbalField")
         .select("*")
         .eq("status", true);

      if (error) {
         return {
            success: false,
            message: error.message || "L·ªói truy v·∫•n d·ªØ li·ªáu"
         };
      }

      return {
         success: true,
         data
      };
   } catch (e) {
      console.log("L·ªói trong getAllFoolbalFieldService:", e);
      return {
         success: false,
         message: "L·ªói khi l·∫•y d·ªØ li·ªáu s√¢n b√≥ng"
      };
   }
};

const updateFootballFieldImageService = async (id, imageUrls) => {
   try {
      // Ki·ªÉm tra xem s√¢n b√≥ng c√≥ t·ªìn t·∫°i kh√¥ng
      const { data: currentData, error: fetchError } = await sql
         .from("FoolbalField")
         .select("*")
         .eq("id", id)
         .single();

      if (fetchError || !currentData) {
         return { success: false, error: "Kh√¥ng t√¨m th·∫•y s√¢n b√≥ng!" };
      }

      // Ki·ªÉm tra imageUrls c√≥ h·ª£p l·ªá kh√¥ng
      if (!Array.isArray(imageUrls) || imageUrls.length === 0) {
         return { success: false, error: "Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t!" };
      }

      // X√≥a ·∫£nh c≈©
      await sql.from("FootballFieldImages").delete().eq("id_FField", id);

      // Th√™m ·∫£nh m·ªõi
      const imageData = imageUrls.map(url => ({ id_FField: id, image_url: url }));
      const { error: imageError } = await sql.from("FootballFieldImages").insert(imageData);

      if (imageError) {
         console.error("‚ùå L·ªói khi l∆∞u ·∫£nh:", imageError);
         return { success: false, error: "L·ªói khi l∆∞u ·∫£nh!" };
      }

      return { success: true, data: imageData };

   } catch (error) {
      console.error("‚ùå L·ªói h·ªá th·ªëng:", error);
      return { success: false, error: "L·ªói h·ªá th·ªëng!" };
   }
};



const getFootballFieldImageService = async (fieldId) => {
   // console.log(fieldId)
   try {
      // L·∫•y danh s√°ch ·∫£nh t·ª´ b·∫£ng FootballFieldImages
      const { data: images, error } = await sql
         .from("FootballFieldImages")
         .select("image_url")
         .eq("id_FField", fieldId)
         .order("created_at", { ascending: true }) // L·∫•y ·∫£nh c≈© nh·∫•t l√†m ·∫£nh m√¥ t·∫£ anh nao cu se dung dau list

      console.log(images)
      if (error || !images.length) {
         return { success: false, message: "Kh√¥ng t√¨m th·∫•y ·∫£nh!" };
      }
      // Ch·ªâ l·∫•y ·∫£nh ƒë·∫ßu ti√™n l√†m ·∫£nh m√¥ t·∫£
      return { success: true, image: images };
   } catch (error) {
      console.error("L·ªói khi l·∫•y ·∫£nh s√¢n b√≥ng:", error);
      return { success: false, message: "L·ªói server!" };
   }
};

export {
   createFoolballFieldService,
   displayFoolbalFieldIdService,
   updateFootballFieldService,
   deleteFootballFieldService,
   getAllFoolbalFieldService,
   updateFootballFieldImageService,
   getFootballFieldImageService
}